name: Verify AWS Authentication
on:
  push:
    branches: [main]

jobs:
  verify-aws-auth:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify AWS authentication
        run: |
          echo "Verifying AWS authentication..."
          aws sts get-caller-identity
          echo "AWS authentication verified successfully."

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup .NET 7 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 7.x
      - name: Restore Dependencies
        run: dotnet restore ./myWebApp.csproj
      - name: Build Project
        run: dotnet build ./myWebApp.csproj --no-restore
      - name: Run Tests
        run: dotnet test ./myWebApp.csproj --no-build --verbosity normal
        
  publish:
    needs: [verify-aws-auth, build]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET 7 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 7.x

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.REPOSITORY }}

      - name: Publish Docker Image to Amazon ECR
        working-directory: ./
        run: |
          dotnet publish -c Release -p:ContainerRepository=latest -p:RuntimeIdentifier=linux-x64
          docker push ${{ secrets.REPOSITORY }} --all-tags
          
